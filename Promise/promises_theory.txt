<<<<<==== 0.  Promises Introduction  =====>>>>

0.1.Promises in JavaScript are a way to handle asynchronous operations more effectively.

0.2.Asynchronous operations are tasks that don't necessarily happen in sequential order, and they often involve things like fetching data from a server, reading a file, or any operation that takes some time to complete.

0.3.Promises provide a cleaner and more readable way to work with asynchronous code compared to traditional callback functions.

0.4.Promises have three states: pending, fulfilled, and rejected.

<<<<<==== 1. creating Promises  =====>>>>
1.1.You create a promise using the Promise constructor, which takes a function as an argument. 

1.2. This function, in turn, takes two parameters: resolve and reject.


<<<<<==== 2. Using resolve and reject:  =====>>>>

2.1. Inside the promise function, when your asynchronous operation completes successfully, you call the resolve function, and if there's an error, you call the reject function.

//<<<<<==== 3. Handling the Promise:  =====>>>>

3.1.After creating a promise, you can use the .then() and .catch() methods to handle the result of the asynchronous operation. The .then() method is called if the promise is resolved, and the .catch() method is called if the promise is rejected.

3.2.Additionally, you can use the .finally() method to execute code regardless of whether the promise is resolved or rejected.

3.3.When you call resolve with a value inside the promise, that value becomes the argument for the then handler. Similarly, if you call reject with a value, that value becomes the argument for the catch handler.


//<<<<<==== 4. Chaining Promises:  =====>>>>

4.1.You can chain multiple promises together using multiple .then() blocks. Each .then() receives the result of the previous promise.


