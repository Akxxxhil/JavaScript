<<<<<=====  1. Synchronous vs. Asynchronous: ======>>>>


1.1.Synchronous: Code runs sequentially, one line at a time. Each line must finish before the next one starts.

1.2.Asynchronous: Code can initiate a task and move on without waiting for that task to complete. It allows other tasks to run in the meantime.


//<<<<<=====  2. Callbacks: ======>>>>

2.1.In traditional JavaScript, callbacks are used to handle asynchronous operations. A callback is a function passed as an argument to another function to be executed later.


//<<<<<=====  3. Promises: ======>>>>
3.1.Promises were introduced to simplify handling asynchronous operations and avoid "callback hell."


//<<<<<=====  4. async and await: ======>>>>

4.1.async functions return a Promise implicitly. The await keyword can only be used inside an async function and pauses the execution until the Promise is resolved.



//<<<<<=====  what is the main differnce between async and promises ====>>>>

async/await and promises are related concepts in JavaScript, and async/await is built on top of promises. Here are the main differences between them:

Syntax:

Promises: Use .then() and .catch() to handle asynchronous operations.
Async/Await: Provides a more concise syntax for handling promises. You use the async keyword to declare an asynchronous function and await to pause the execution until a promise is resolved.
Error Handling:

Promises: Use .catch() to handle errors. Errors in any part of the promise chain will be caught by the nearest .catch() block.
Async/Await: You can use try/catch for error handling, which often results in more readable and structured code.
Readability:

Promises: Chaining multiple asynchronous operations can lead to nested .then() calls, which can be less readable (a situation known as "Callback Hell" or "Pyramid of Doom").
Async/Await: Provides a more linear and synchronous-looking code structure, making it easier to read and maintain, especially for multiple asynchronous operations.
Return Value:

Promises: Always return a promise, and you need to handle the resolution using .then() or rejection using .catch() even if you just want to return a value.
Async/Await: Allows you to use a more synchronous style of coding. An async function always returns a promise, but within the function, you can use await to get the resolved value directly.
Error Stacks:

Promises: Error stacks can be more complex and less informative, making it harder to trace the origin of an error.
Async/Await: Error stacks are often more straightforward, making it easier to identify the source of errors.
Use Cases:

Promises: Still widely used and essential, especially when working with libraries or APIs that provide promise-based interfaces.
Async/Await: Preferred for its cleaner syntax and improved readability, particularly in newer code or when working with modern JavaScript frameworks.